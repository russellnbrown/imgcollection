  void drawPlane2(Plane p)
        {
            System.Windows.Controls.Image image = new System.Windows.Controls.Image();
            image.Height = 150;
            //Define the URI location of the image
            BitmapImage myBitmapImage = new BitmapImage();
            myBitmapImage.BeginInit();
            myBitmapImage.UriSource = new Uri("pack://application:,,/images/planet.bmp");
            // To save significant application memory, set the DecodePixelWidth or  
            // DecodePixelHeight of the BitmapImage value of the image source to the desired 
            // height or width of the rendered image. If you don't do this, the application will 
            // cache the image as though it were rendered as its normal size rather then just 
            // the size that is displayed.
            // Note: In order to preserve aspect ratio, set DecodePixelWidth
            // or DecodePixelHeight but not both.
            //Define the image display properties
            myBitmapImage.DecodePixelHeight = 150;
            myBitmapImage.EndInit();
            image.Source = myBitmapImage;
            image.Opacity = 0.6;
            image.Stretch = System.Windows.Media.Stretch.None;
           

            //The map location to place the image at
            Location location = new Location() { Latitude = p.Latitude, Longitude = p.Longitude };
            //Center the image around the location specified
            PositionOrigin position = PositionOrigin.Center;

            //Add the image to the defined map layer
            ml[inactiveLayer()].AddChild(image, location, position);

           // ml[inactiveLayer()].Children.Add(circle);
 
        }

        private DrawingVisual CreateTriangle()
        {
            var triangle = new DrawingVisual();
            using (DrawingContext dc = triangle.RenderOpen())
            {
                var start = new Point(0, 50);

                var segments = new[]
                {
          new LineSegment(new Point(50,0), true),
          new LineSegment(new Point(50, 100), true)
       };

                var figure = new PathFigure(start, segments, true);
                var geo = new PathGeometry(new[] { figure });
                dc.DrawGeometry(Brushes.Red, null, geo);

                var drawingPen = new Pen(Brushes.Black, 3);
                dc.DrawLine(drawingPen, new Point(0, 50), new Point(50, 0));
                dc.DrawLine(drawingPen, new Point(50, 0), new Point(50, 100));
                dc.DrawLine(drawingPen, new Point(50, 100), new Point(0, 50));
            }

            return triangle;
        }

        void drawPlane3(Plane p)
        {

            int w = 32;

            //var target = new RenderTargetBitmap(100, 100, 100, 100, PixelFormats.Pbgra32);
            var target = new RenderTargetBitmap(w, w, 0, 0, PixelFormats.Pbgra32);
            var visual = new DrawingVisual();

            using (var r = visual.RenderOpen())
            {
                // r.DrawImage(pl, new Rect(0, 0, pl.Width, pl.Height));
                r.DrawLine(new System.Windows.Media.Pen(System.Windows.Media.Brushes.Red, 1.0), new System.Windows.Point(0, 0), new System.Windows.Point(0, w));
                r.DrawLine(new System.Windows.Media.Pen(System.Windows.Media.Brushes.Red, 1.0), new System.Windows.Point(0, w), new System.Windows.Point(w, w));
                r.DrawLine(new System.Windows.Media.Pen(System.Windows.Media.Brushes.Red, 1.0), new System.Windows.Point(w, w), new System.Windows.Point(w, 0));
                r.DrawLine(new System.Windows.Media.Pen(System.Windows.Media.Brushes.Red, 1.0), new System.Windows.Point(w, 0), new System.Windows.Point(0,0));
                r.DrawLine(new System.Windows.Media.Pen(System.Windows.Media.Brushes.Blue, 0.0), new System.Windows.Point(0, 0), new System.Windows.Point(w, w));
                //r.DrawText(new FormattedText(
                //    p.HexIdent, CultureInfo.CurrentCulture, FlowDirection.LeftToRight,
                //    new Typeface("Segoe UI"), 24.0, System.Windows.Media.Brushes.Black), new System.Windows.Point(100, 10));
            }

            target.Render(visual);

            System.Windows.Controls.Image image = new System.Windows.Controls.Image();
            image.BeginInit();
            image.Source = target;
            
            image.EndInit();
            image.Opacity = 1;
            image.Stretch = System.Windows.Media.Stretch.None;

            Location location = new Location() { Latitude = p.Latitude, Longitude = p.Longitude };
            //Center the image around the location specified
            PositionOrigin position = PositionOrigin.Center;

            //Add the image to the defined map layer
            ml[inactiveLayer()].AddChild(image, location, position);
        }


		
        void drawPlane1(Plane p)
        {
            MapPolyline polygon = new MapPolyline();
            polygon.Fill = new System.Windows.Media.SolidColorBrush(System.Windows.Media.Colors.Blue);
            polygon.Stroke = new System.Windows.Media.SolidColorBrush(System.Windows.Media.Colors.Green);
            polygon.StrokeThickness = 5;
            polygon.Opacity = 0.7;
            polygon.Locations = new LocationCollection() {
        new Location(p.Latitude, p.Longitude),
        new Location(p.Latitude+0.001, p.Longitude+0.001)};



            ml[inactiveLayer()].Children.Add(polygon);
        }


       BitmapImage pl;

		           try
            {
                pl = new BitmapImage();
                pl.BeginInit();
                pl.UriSource = new Uri("pack://application:,,/images/planet.bmp");
                pl.EndInit();
            }
            catch (Exception e)
            {
                l.Error(e.Message);
            }



			            StreamGeometry streamGeometry = new StreamGeometry();
            using (StreamGeometryContext geometryContext = streamGeometry.Open())
            {
                geometryContext.BeginFigure(R16ApBL, true, true);
                PointCollection points = new PointCollection { R16ApBR, R16ApTR, R16ApTL, R16ApBL };
                geometryContext.PolyLineTo(points, true, true);
            }
            Point pp = new Point(p.Longitude, p.Latitude);
            bool ins = streamGeometry.FillContains(pp);


			
        Path  makeApproach16R()
        {
            Path myPath = new Path();
            myPath.Stroke = Brushes.Black;
            myPath.StrokeThickness = 1;
            StreamGeometry geometry = new StreamGeometry();
            geometry.FillRule = FillRule.EvenOdd;
            using (StreamGeometryContext geometryContext = geometry.Open())
            {
                geometryContext.BeginFigure(pR16ApBL, true, true);
                PointCollection points = new PointCollection
                                             {
                                                 pR16ApBR,
                                                 pR16ApTL,
                                                 pR16ApTR
                                             };
                geometryContext.PolyLineTo(points, true, true);
            }
            geometry.Freeze();
            myPath.Data = geometry;
            return myPath;
        }


		
        private static LocationCollection  makeApproach16R()
        {
 
            Location tl = new Location(-33.872743, 151.170923);
            Location tr = new Location(-33.870177, 151.188261);
            Location br = new Location(-33.948715, 151.188784);
            Location bl = new Location(-33.948911, 151.187464);

            var locations = new LocationCollection();
            locations.Add(tl);
            locations.Add(tr);
            locations.Add(br);
            locations.Add(bl);
            locations.Add(tl);
            return locations;
        }

        private static LocationCollection makeApproach16L()
        {
            Location br = new Location(-33.927327, 151.172232);
            Location bl = new Location(-33.927701, 151.169936);

            Location tl = new Location(-33.844984, 151.138692);
            Location tr = new Location(-33.842382, 151.155086);

            var locations = new LocationCollection();
            locations.Add(tl);
            locations.Add(tr);
            locations.Add(br);
            locations.Add(bl);
            locations.Add(tl);
            return locations;
        }

        private static LocationCollection makeApproach28L()
        {

            Location br = new Location(-34.037789, 151.202623);
            Location bl = new Location(-34.039909, 151.191358);
            Location tl = new Location(-33.966965, 151.179666);
            Location tr = new Location(-33.966573, 151.183056);

            var locations = new LocationCollection();
            locations.Add(tl);
            locations.Add(tr);
            locations.Add(br);
            locations.Add(bl);
            locations.Add(tl);
            return locations;

        }

        private static LocationCollection makeApproach28R()
        {
            Location br = new Location(-34.038650, 151.217843);
            Location bl = new Location(-34.039467, 151.205687);
            Location tl = new Location(-33.972181, 151.192871);
            Location tr = new Location(-33.971398, 151.196390);

            var locations = new LocationCollection();
            locations.Add(tl);
            locations.Add(tr);
            locations.Add(br);
            locations.Add(bl);
            locations.Add(tl);
            return locations;
        }

		                    Pushpin pp = new Pushpin();
                    pp.Heading = 90;
                    pp.Location = c.takeoff;
                    pp.Height = 10;
                    pp.Width = 10;
                    pp.ToolTip = "Takeoff point for " + c.Name;
                    
                   // mainmap.Children.Add(pp);


<Window x:Class="pplot.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:m="clr-namespace:Microsoft.Maps.MapControl.WPF;assembly=Microsoft.Maps.MapControl.WPF"
        xmlns:local="clr-namespace:pplot"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>

        <TabControl>
            <TabItem Header="Map">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="200" />
                        <ColumnDefinition Width="200" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <m:Map Grid.Column="0" Grid.Row="0" x:Name="mainmap"  CredentialsProvider="AlkF1YZk5OkMIqs-_P_cLGgaV0bKpNwtiZcPTrQPAABlyudnqkDSsbgiiY7qPMNn" Mode="Road"
                Center="-33.930, 151.171" ZoomLevel="13" >
                        <Canvas Width="10" Height="10" 
              m:MapLayer.Position="-33.930, 151.171" 
              m:MapLayer.PositionOrigin="Center" Opacity="0.7" ToolTip="MapCenter">
                            <Path Data="M 0,0 L 10,0 10,10, 0,10, 0,0" Fill="Red" Stroke="Wheat" StrokeThickness="2" />

                        </Canvas>
                    </m:Map>
                    <Grid Grid.Column="1" Grid.Row="0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="2*" />
                            <RowDefinition Height="1*" />
                        </Grid.RowDefinitions>
                        <Button Grid.Column="0" Grid.Row="0">Button 1</Button>
                        <Button Grid.Column="0" Grid.Row="1">Button 2</Button>
                    </Grid>
                    <Grid Grid.Column="2" Grid.Row="0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="2*" />
                            <RowDefinition Height="1*" />
                        </Grid.RowDefinitions>
                        <Button Grid.Column="0" Grid.Row="0">Button 8</Button>
                        <Button Grid.Column="0" Grid.Row="1">Button 9</Button>
                    </Grid>
                </Grid>
            </TabItem>
            <TabItem Header="List">
                <ListView Margin="10" Name="planelist">
                    <ListView.View>
                        <GridView>
                            <GridViewColumn Header="HexIdent" Width="80" DisplayMemberBinding="{Binding HexIdent}" />
                            <GridViewColumn Header="Updates" Width="80" DisplayMemberBinding="{Binding Updates}" />
                            <GridViewColumn Header="Age" Width="80" DisplayMemberBinding="{Binding Age}" />
                            <GridViewColumn Header="Callsign" Width="80" DisplayMemberBinding="{Binding Callsign}" />
                            <GridViewColumn Header="Squawk" Width="80" DisplayMemberBinding="{Binding Squawk}" />
                            <GridViewColumn Header="Lat" Width="80" DisplayMemberBinding="{Binding Latitude}" />
                            <GridViewColumn Header="Lon" Width="80" DisplayMemberBinding="{Binding Longitude}" />
                            <GridViewColumn Header="Altitude" Width="80" DisplayMemberBinding="{Binding Altitude}" />
                            <GridViewColumn Header="Heading" Width="80" DisplayMemberBinding="{Binding Track}" />
                            <GridViewColumn Header="Ground" Width="80" DisplayMemberBinding="{Binding IsOnGround}" />
                            <GridViewColumn Header="Emergency" Width="80" DisplayMemberBinding="{Binding Emergency}" />
                        </GridView>
                    </ListView.View>
                </ListView>
            </TabItem>
            <TabItem Header="Details" />
        </TabControl>

     </Grid>
</Window>
